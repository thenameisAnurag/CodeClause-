# -*- coding: utf-8 -*-
"""Code Clause -2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pe-oPZ1n5Zc-upkDDj4TnCx83giE0k1p

Name - Anurag Mishra

---


Task 2 : Wine Quality Prediction
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('/content/winequality-red.csv')
data

data.info()

data.isnull().sum()

data.describe()

"""Data Visualization

*   Using Box Plot (Finding Outliers)


"""

plt.figure(figsize=(5,5))
for col,value in data.items():
  plt.boxplot(value)
  plt.title(col)
  plt.show()

plt.figure(figsize=(5,5))
for col,value in data.items():
  sns.distplot(value)
  plt.title(col)
  plt.show()

plt.figure(figsize=(10,6))
corr=data.corr()
sns.heatmap(corr,cmap='coolwarm',annot=True)

X=data.drop(columns=['quality'])
Y=data['quality']

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
def classify(model,X,Y):
  X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)
  model.fit(X_train,Y_train)
  print('Accuracy',model.score(X_test,Y_test)*100)
  Y_pred = model.predict(X_test)

# Calculate and print the Mean Squared Error (MSE)
  mse = mean_squared_error(Y_test, Y_pred)
  print(f"Mean Squared Error: {mse}")

from sklearn.ensemble import RandomForestRegressor
model=RandomForestRegressor()
classify(model,X,Y)

from sklearn.tree import DecisionTreeRegressor
model=DecisionTreeRegressor()
classify(model,X,Y)

from sklearn.svm import SVC
model=SVC()
classify(model,X,Y)

# # Function to visualize confusion matrix
# def visualize_confusion_matrix(model, X_test, Y_test, title):
#     plt.figure(figsize=(6, 6))
#     plot_confusion_matrix(model, X_test, Y_test, cmap=plt.cm.Blues, display_labels=quality_labels)
#     plt.title(title)
#     plt.show()

# # List of quality labels
# quality_labels = data['quality'].unique()

# # Splitting data for visualization
# X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# # Instantiate models for visualization
# rf_model = RandomForestRegressor()
# dt_model = DecisionTreeRegressor()
# svm_model = SVC()

# # Fit models on training data
# rf_model.fit(X_train, Y_train)
# dt_model.fit(X_train, Y_train)
# svm_model.fit(X_train, Y_train)

# # Visualize confusion matrices
# visualize_confusion_matrix(rf_model, X_test, Y_test, "Random Forest Confusion Matrix")
# visualize_confusion_matrix(dt_model, X_test, Y_test, "Decision Tree Confusion Matrix")
# visualize_confusion_matrix(svm_model, X_test, Y_test, "SVM Confusion Matrix")

