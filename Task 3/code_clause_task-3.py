# -*- coding: utf-8 -*-
"""Code Clause 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nEIdmT27q3Xg5XN8nShmF_AftTf1wZRB

Name - Anurag Mishra

---


Task 3 :Personalized Medicine Recommending System
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt

data = pd.read_csv('/content/data.csv')
data

data.head()

data.shape

reason_counts = data['Reason'].value_counts()

# Plot the bar graph
plt.figure(figsize=(10, 6))
reason_counts.plot(kind='bar')
plt.title('Frequency of Unique Reasons')
plt.xlabel('Reason')
plt.ylabel('Frequency')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

data['Description']

"""# Data Cleaning

Removing Spaces Using Lambda Function in Description Column
"""

data['Description'] = data['Description'].apply(lambda x: x.replace(" ", ""))

data['Description']

"""Tokenizing The Reason Column

"""

data['Reason'].apply(lambda x: ' '.join(map(str, x)).split())

data.info()

"""Craeting A Tag Column Consisting OF Description and Reason"""

data['tags'] = data['Description'] + ' ' + data['Reason'].apply(lambda x: ' '.join(x))
new_data = data[['Description', 'Reason', 'tags']]

new_data.head()

new_data['tags'].apply(lambda x:" ".join(x))

"""# Stemming the Data


"""

import nltk
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

"""# Vectorizing The Data

---
Converting Text -----> Numeric
"""

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=200,stop_words='english')

new_data['tags'] = new_data['tags'].apply(lambda x: ' '.join([ps.stem(word) for word in x.split()]))

transformed_data = cv.fit_transform(new_data['tags']).toarray()

print(transformed_data.shape)

"""# Calculating Similarity Using Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(transformed_data)

similarity_df = pd.DataFrame(similarity, index=new_data.index, columns=new_data.index)

"""# Recommendation Based on

---



*   Discription
*   Reason


"""

def recommend(medicine):
    medicine_index = new_data[new_data['Description'] == medicine].index[0]
    distances = similarity[medicine_index]
    medicines_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    recommended_meds = [new_data.iloc[i[0]]['Description'] for i in medicines_list]
    return recommended_meds

medicine_to_recommend = input("Enter the name of the medicine: ")
recommended_meds = recommend(medicine_to_recommend)
print(f"Recommended medicines for '{medicine_to_recommend}':")
for med in recommended_meds:
    print(med)

def recommend(reason):
    reason_tags = ' '.join([ps.stem(word) for word in reason.split()])
    reason_vector = cv.transform([reason_tags]).toarray()
    cosine_similarities = cosine_similarity(reason_vector, transformed_data)[0]
    similar_meds_indices = cosine_similarities.argsort()[-6:-1][::-1]
    recommended_meds = [new_data.iloc[i]['Description'] for i in similar_meds_indices]
    return recommended_meds


reason_to_recommend = input("Enter the reason: ")
recommended_meds = recommend(reason_to_recommend)
print(f"Recommended medicines for the reason '{reason_to_recommend}':")
for med in recommended_meds:
    print(med)

